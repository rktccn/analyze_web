import http from '../utils/https.js'


// // 获取数据
// export const getOriginData = (type) => {
//     return http({
//         url: '',
//         method: 'get',
//         data: {
//             type
//         }
//     })
// }
//
// // 获取热力图数据
// export const getHeatMapData = () => {
//     return http({
//         url: '',
//         method: 'get',
//     })
// }
//
// // 获取散点图数据
// export const getScatterData = () => {
//     return http({
//         url: '',
//         method: 'get',
//     })
// }
//
// // 获取聚类数据
// export const getClusterData = (k_value,type) => {
//     return http({
//         url: '',
//         method: 'get',
//         data: {
//             k_value,
//             type
//         }
//     })
// }
//
// // 获取分类树
// export const getTreeData = (maxDepth,minLeaf) => {
//     return http({
//         url: '',
//         method: 'get',
//         data:{
//             maxDepth,
//             minLeaf
//         }
//     })
// }
//
// // 获取回归
// export const getRegressionData = (type) => {
//     return http({
//         url: '',
//         method: 'get',
//         data: {
//             type
//         }
//     })
// }


// 获取数据
export const getOriginData = async (type) => {
    const generateColumns = (length = 10, prefix = 'column-', props) =>
        Array.from({length}).map((_, columnIndex) => ({
            ...props,
            key: `${prefix}${columnIndex}`,
            dataKey: `${prefix}${columnIndex}`,
            title: `Column ${columnIndex}`,
            width: 150
        }))

    const generateData = (
        columns,
        length = 200,
        prefix = 'row-'
    ) =>
        Array.from({length}).map((_, rowIndex) => {
            return columns.reduce(
                (rowData, column, columnIndex) => {
                    rowData[column.dataKey] = `Row ${rowIndex} - Col ${columnIndex}`
                    return rowData
                }, {
                    id: `${prefix}${rowIndex}`
                    // parentId: null
                }
            )
        })

    return {
        columns: generateColumns(10),
        data: generateData(generateColumns(10), 200),
        count: 200
    }
}

// 获取热力图数据
export const getHeatMapData = async () => {
    return {
        xAxis: ['面包', '可乐', '麦片', '牛奶', '鸡蛋'],
        yAxis: ['面包', '可乐', '麦片', '牛奶', '鸡蛋'],
        data: [[0, 0, 0.7777777777777778], [0, 1, 0.4444444444444444], [0, 2, 0.4444444444444444], [0, 3, 0.4444444444444444], [0, 4, 0.2222222222222222], [1, 0, 0.4444444444444444], [1, 1, 0.6666666666666666], [1, 2, 0.1111111111111111], [1, 3, 0.4444444444444444], [1, 4, 0.0], [2, 0, 0.4444444444444444], [2, 1, 0.1111111111111111], [2, 2, 0.4444444444444444], [2, 3, 0.2222222222222222], [2, 4, 0.2222222222222222], [3, 0, 0.4444444444444444], [3, 1, 0.4444444444444444], [3, 2, 0.2222222222222222], [3, 3, 0.6666666666666666], [3, 4, 0.1111111111111111], [4, 0, 0.2222222222222222], [4, 1, 0.0], [4, 2, 0.2222222222222222], [4, 3, 0.1111111111111111], [4, 4, 0.2222222222222222]]
    }
}

// 获取散点图数据
export const getScatterData = async () => {
    return {
        data: [
            [
                [-2.68, 0.32],
                [-2.71, -0.18],
                [-2.89, -0.14],
                [-2.75, -0.32],
                [-2.73, 0.33],
                [-2.28, 0.74],
                [-2.82, -0.09],
                [-2.63, 0.16],
                [-2.89, -0.58],
                [-2.67, -0.11],
                [-2.51, 0.65],
                [-2.61, 0.01],
                [-2.79, -0.24],
                [-3.22, -0.51],
                [-2.64, 1.18],
                [-2.39, 1.34],
                [-2.62, 0.81],
                [-2.65, 0.31],
                [-2.2, 0.87],
                [-2.59, 0.51],
                [-2.31, 0.39],
                [-2.54, 0.43],
                [-3.22, 0.13],
                [-2.3, 0.1],
                [-2.36, -0.04],
                [-2.51, -0.15],
                [-2.47, 0.13],
                [-2.56, 0.37],
                [-2.64, 0.31],
                [-2.63, -0.2],
                [-2.59, -0.2],
                [-2.41, 0.41],
                [-2.65, 0.81],
                [-2.6, 1.09],
                [-2.64, -0.12],
                [-2.87, 0.07],
                [-2.63, 0.6],
                [-2.8, 0.27],
                [-2.98, -0.49],
                [-2.59, 0.23],
                [-2.77, 0.26],
                [-2.85, -0.94],
                [-3.0, -0.34],
                [-2.41, 0.19],
                [-2.21, 0.44],
                [-2.71, -0.25],
                [-2.54, 0.5],
                [-2.84, -0.23],
                [-2.54, 0.58],
                [-2.7, 0.11]
            ],
            [
                [1.28, 0.69],
                [0.93, 0.32],
                [1.46, 0.5],
                [0.18, -0.83],
                [1.09, 0.07],
                [0.64, -0.42],
                [1.1, 0.28],
                [-0.75, -1.0],
                [1.04, 0.23],
                [-0.01, -0.72],
                [-0.51, -1.27],
                [0.51, -0.1],
                [0.26, -0.55],
                [0.98, -0.12],
                [-0.17, -0.25],
                [0.93, 0.47],
                [0.66, -0.35],
                [0.24, -0.33],
                [0.94, -0.54],
                [0.05, -0.58],
                [1.12, -0.08],
                [0.36, -0.07],
                [1.3, -0.33],
                [0.92, -0.18],
                [0.71, 0.15],
                [0.9, 0.33],
                [1.33, 0.24],
                [1.56, 0.27],
                [0.81, -0.16],
                [-0.31, -0.37],
                [-0.07, -0.71],
                [-0.19, -0.68],
                [0.14, -0.31],
                [1.38, -0.42],
                [0.59, -0.48],
                [0.81, 0.19],
                [1.22, 0.41],
                [0.82, -0.37],
                [0.25, -0.27],
                [0.17, -0.68],
                [0.46, -0.67],
                [0.89, -0.03],
                [0.23, -0.4],
                [-0.7, -1.01],
                [0.36, -0.5],
                [0.33, -0.21],
                [0.38, -0.29],
                [0.64, 0.02],
                [-0.91, -0.76],
                [0.3, -0.35]
            ], [
                [2.53, -0.01],
                [1.42, -0.57],
                [2.62, 0.34],
                [1.97, -0.18],
                [2.35, -0.04],
                [3.4, 0.55],
                [0.52, -1.19],
                [2.93, 0.36],
                [2.32, -0.24],
                [2.92, 0.78],
                [1.66, 0.24],
                [1.8, -0.22],
                [2.17, 0.22],
                [1.35, -0.78],
                [1.59, -0.54],
                [1.9, 0.12],
                [1.95, 0.04],
                [3.49, 1.18],
                [3.8, 0.26],
                [1.3, -0.76],
                [2.43, 0.38],
                [1.2, -0.61],
                [3.5, 0.46],
                [1.39, -0.2],
                [2.28, 0.33],
                [2.61, 0.56],
                [1.26, -0.18],
                [1.29, -0.12],
                [2.12, -0.21],
                [2.39, 0.46],
                [2.84, 0.38],
                [3.23, 1.37],
                [2.16, -0.22],
                [1.44, -0.14],
                [1.78, -0.5],
                [3.08, 0.69],
                [2.14, 0.14],
                [1.91, 0.05],
                [1.17, -0.16],
                [2.11, 0.37],
                [2.31, 0.18],
                [1.92, 0.41],
                [1.42, -0.57],
                [2.56, 0.28],
                [2.42, 0.3],
                [1.94, 0.19],
                [1.53, -0.38],
                [1.76, 0.08],
                [1.9, 0.12],
                [1.39, -0.28]
            ]
        ]
    }
}

// 获取聚类数据
export const getClusterData = async (k_value, type) => {
    return {
        data: [
            [
                [1.28482569, 0.68516047],
                [1.46430232, 0.50426282],
                [1.55780216, 0.26749545],
                [2.53119273, -0.00984911],
                [2.61667602, 0.34390315],
                [1.97153105, -0.1797279],
                [2.35000592, -0.04026095],
                [3.39703874, 0.55083667],
                [2.93258707, 0.3555],
                [2.32122882, -0.2438315],
                [2.91675097, 0.78279195],
                [1.66177415, 0.24222841],
                [1.80340195, -0.21563762],
                [2.1655918, 0.21627559],
                [1.90445637, 0.11925069],
                [1.94968906, 0.04194326],
                [3.48705536, 1.17573933],
                [3.79564542, 0.25732297],
                [2.42781791, 0.37819601],
                [3.49992004, 0.4606741],
                [2.2754305, 0.33499061],
                [2.61409047, 0.56090136],
                [2.12360872, -0.20972948],
                [2.38800302, 0.4646398],
                [2.84167278, 0.37526917],
                [3.23067366, 1.37416509],
                [2.15943764, -0.21727758],
                [1.78129481, -0.49990168],
                [3.07649993, 0.68808568],
                [2.14424331, 0.1400642],
                [1.90509815, 0.04930053],
                [2.10761114, 0.37228787],
                [2.31415471, 0.18365128],
                [1.9222678, 0.40920347],
                [2.56301338, 0.2778626],
                [2.41874618, 0.3047982],
                [1.94410979, 0.1875323],
                [1.76434572, 0.07885885],
                [1.90094161, 0.11662796],
            ], [
                [-2.6841256259695374, 0.3193972465851019],
                [-2.7141416872943265, -0.17700122506478058],
                [-2.888990569059297, -0.1449494260855574],
                [-2.74534285564141, -0.318298979251916],
                [-2.7287165365545305, 0.32675451293491986],
                [-2.2808596328444923, 0.7413304490629148],
                [-2.820537750740609, -0.08946138452856865],
                [-2.626144973146633, 0.16338495969832856],
                [-2.8863827317805537, -0.5783117541867039],
                [-2.672755797820954, -0.11377424587411698],
                [-2.506947090651856, 0.6450688986485738],
                [-2.6127552309087236, 0.014729939161374515],
                [-2.786109266188018, -0.23511200020171852],
                [-3.2238037438656533, -0.5113945870063822],
                [-2.644750389942029, 1.1787646364375748],
                [-2.3860390335311337, 1.3380623304006525],
                [-2.6235278752244264, 0.8106795141812576],
                [-2.6482967062543814, 0.3118491445933546],
                [-2.1998203236175797, 0.8728390389622105],
                [-2.5879863998787687, 0.5135603087492768],
                [-2.3102562152425183, 0.3913459356538939],
                [-2.5437052287571564, 0.4329960632790281],
                [-3.215939415648612, 0.13346806953852594],
                [-2.302733182226207, 0.09870885481409937],
                [-2.3557540491237727, -0.037281859677382526],
                [-2.5066689069258223, -0.14601688049526787],
                [-2.468820073121339, 0.13095148943525023],
                [-2.562319906196016, 0.36771885743419974],
                [-2.639534715384543, 0.3120399802352826],
                [-2.6319893872743467, -0.19696122492431453],
                [-2.5873984766893527, -0.20431849127413348],
                [-2.409932497002175, 0.4109242642295726],
                [-2.6488623343499125, 0.813363820296962],
                [-2.598736749100587, 1.0931457594493568],
                [-2.6369268781057995, -0.12132234786586331],
                [-2.8662416521186698, 0.06936447158008038],
                [-2.6252380498503722, 0.5993700213794233],
                [-2.8006841154482225, 0.2686437377979823],
                [-2.980502043781994, -0.48795834442861535],
                [-2.590006313968096, 0.22904383682701246],
                [-2.770102426027902, 0.26352753374425647],
                [-2.8493687050431045, -0.9409605736411967],
                [-2.9974065465949082, -0.3419260574716098],
                [-2.405614485097486, 0.18887142893026038],
                [-2.2094892377836794, 0.43666314163918785],
                [-2.714451426757708, -0.25020820418521117],
                [-2.53814825899894, 0.5037711444614376],
                [-2.8394621676428504, -0.22794556949382755],
                [-2.543085749830393, 0.5794100215198891],
                [-2.70335978233516, 0.10770608249941152],
            ], [
                [0.9324885323123177, 0.31833363826262856],
                [0.18331771995836976, -0.8279590118206324],
                [1.0881032577116656, 0.07459067519771567],
                [0.641669084258077, -0.41824687156867885],
                [1.0950606626324462, 0.28346827006152875],
                [-0.7491226698296582, -1.0048909611818952],
                [1.044131826053435, 0.22836189978839502],
                [-0.008745404082897042, -0.723081905004834],
                [-0.5078408838353267, -1.2659711905263937],
                [0.5116985574475968, -0.10398123549904058],
                [0.2649765081120461, -0.5500364636804753],
                [0.9849345104708895, -0.12481785412635768],
                [-0.17392537168176844, -0.2548542087025894],
                [0.927860780944247, 0.46717949444151],
                [0.6602837616969361, -0.3529696657238504],
                [0.23610499331767099, -0.3336107668249157],
                [0.9447337280198124, -0.543145550779767],
                [0.045226976298699206, -0.5838343774718646],
                [1.1162831773500488, -0.08461685219478804],
                [0.35788841799730686, -0.06892503165601431],
                [1.2981838753589126, -0.3277873083339178],
                [0.9217289224470363, -0.1827377936213678],
                [0.7148533259114113, 0.14905594436978425],
                [0.900174373172167, 0.3285044738343227],
                [1.3320244367220881, 0.2444408760163428],
                [0.8132906498175407, -0.16335030068761647],
                [-0.3055837780243095, -0.36826218975458824],
                [-0.06812649206836435, -0.7051721317994655],
                [-0.18962247237850266, -0.6802867635281334],
                [0.13642871155801437, -0.314032438249237],
                [1.38002643591551, -0.42095428731388196],
                [0.5880064433398624, -0.48428741998121816],
                [0.8068583125004113, 0.19418231471315078],
                [1.2206908824443523, 0.4076195936110067],
                [0.8150952357665988, -0.3720370599095023],
                [0.2459576798866916, -0.268524396622015],
                [0.16641321714545612, -0.6819267248636268],
                [0.46480028840377846, -0.6707115445117204],
                [0.8908151984694487, -0.03446444436826912],
                [0.23054802355945478, -0.4043858480073254],
                [-0.7045317592446643, -1.0122482275317142],
                [0.3569814947010463, -0.5049100933371088],
                [0.3319344799450577, -0.21265468378116997],
                [0.3762156510666697, -0.2932189292514191],
                [0.6425760075543374, 0.017738190112415897],
                [-0.9064698649488365, -0.7560933665990142],
                [0.29900084187814263, -0.3488978064503361],
                [1.4152358767039013, -0.5749163475464893],
                [0.5212322439097721, -1.1927587270006448],
                [1.3461635794584506, -0.7768183473443396],
                [1.5859282238732197, -0.5396407140267186],
                [1.300791712637656, -0.7611496364350638],
                [1.1990011054655598, -0.6060915277579304],
                [1.3887661316914643, -0.20439932735215122],
                [1.258508160511487, -0.1797047947227469],
                [1.2911320591150202, -0.11666865117401161],
                [1.4441612423295087, -0.1434134104575811],
                [1.1693263393414992, -0.1649902620231097],
                [1.4152358767039013, -0.5749163475464893],
                [1.5271666148145162, -0.37531698258048873],
                [1.3901888619479126, -0.2826609379905506],
            ]
        ]
    }
}

// 获取分类树
export const getTreeData = async (maxDepth, minLeaf) => {
    return {
        data: {
            name: 'root',
            children: [
                {
                    name: '分类1',
                    children: [
                        {name: '叶子节点1'},
                        {name: '叶子节点2'},
                        {
                            name: '叶子节点3',
                            children: [
                                {name: '叶子节点3-1'},
                                {name: '叶子节点3-2'},
                                {name: '叶子节点3-3'}
                            ]
                        }
                    ]
                },
                {
                    name: '分类2',
                    children: [
                        {
                            name: '叶子节点4',
                            children: [{name: '叶子节点5'}]
                        }
                    ]
                }
            ]
        }
    }
}

// 获取回归
export const getRegressionData = async (type) => {
    return http({
        url: '',
        method: 'get',
        data: {
            type
        }
    })
}
